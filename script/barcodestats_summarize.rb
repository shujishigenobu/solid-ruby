#===
# barcodestats_summarize.rb

if ARGV[0] == "-h" || ARGV[0] == "--help" || ARGV[0].nil?
  puts ""
  puts "Usage: #{File.basename($0)} BarcodeStatistics_File"
  puts ""
  puts "    BarcodeStatistics_file is generated by SETS in SOLiD pipeline"
  exit
end

infile = ARGV[0]
COL_NAMES = [      #in original format
  "Library",       #0
  "Barcode",       #1
  "0 Mismatches",  #2
  "1 Mismatch",    #3
  "Total"]         #4

data = []
data2 = []

File.open(infile).each do |l|
  next if /^\#/.match(l)
  a = l.chomp.split(/\t/,-1)
  if (/^\d{1,2}$/.match(a[1]) || /^bc.+_\d\d$/.match(a[1]))
    data << a 
  elsif /^unassigned\tunresolved/.match(l)
    data2 << a
  end
end

puts "#=== SOLiD Run Barcode Assignment Summary ==="
puts "#"
puts "# source: #{infile}"
puts "# date: #{Time.now}"
puts "# script: #{__FILE__}"
puts "# author: #{ENV['USER']}"
puts "#"
puts "# " + %w{ library  barcode reads }.join("\t")

data.sort{|a,b| a[1].to_i <=> b[1].to_i}.each do |x|
  puts [0,1,4].collect{|i| x[i]}.join("\t")
end

un = data2.pop
puts [un[0], "NA", un[4].to_i].join("\t")

bc_total = data.collect{|x| x[4].to_i}.inject{|sum, element| sum + element}

puts "# total number of  beads with barcode assigned: " + bc_total.to_s.reverse.gsub(/(\d{3})/, "\\1,").reverse.sub(/^,/, "")

